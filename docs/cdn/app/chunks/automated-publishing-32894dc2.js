import{S as ce,i as pe,s as ue,e as o,t as e,k as he,c as n,a as r,g as a,d as s,n as de,b as i,f as fe,I as t,V as xt}from"./vendor-4535d2db.js";function ge(re){let l,G,f,X,N,Z,p,tt,g,et,at,x,st,ot,j,k,nt,m,rt,S,lt,it,O,le=`<code class="language-javascript"><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'axios'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">URL</span> <span class="token operator">=</span>
  <span class="token string">'https://api.github.com/repos/reuters-graphics/&lt;YOUR REPO>/actions/workflows/publish.yaml/dispatches'</span><span class="token punctuation">;</span>

<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>
    <span class="token constant">URL</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      ref<span class="token operator">:</span> <span class="token string">'master'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        Accept<span class="token operator">:</span> <span class="token string">'application/vnd.github.v3+json'</span><span class="token punctuation">,</span>
        Authorization<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">token </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">WORKFLOW_AUTH_TOKEN</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,d,ct,C,pt,ut,Y,ht,T,y,dt,b,ft,D,gt,kt,P,v,mt,u,yt,_,bt,vt,K,_t,Et,R,E,wt,M,At,U,Gt,w,A,jt,W,Ot,Tt,Pt,h,Rt,F,Ht,It,V,Lt,Nt;return{c(){l=o("section"),G=o("h1"),f=o("a"),X=e("Automating publishing"),N=o("p"),Z=e("This graphics kit can publish projects to our RNGS server using GitHub Actions."),p=o("p"),tt=e("To set your project up for automated publishing, make sure your repo is located in the "),g=o("a"),et=e("Reuters Graphics Github org"),at=e(" then move and uncomment the YAML file at "),x=o("code"),st=e(".github/publish.yaml"),ot=e(" and further configure the publishing conditions per the comments in that file."),j=o("h2"),k=o("a"),nt=e("Publishing from a script"),m=o("p"),rt=e("If you\u2019re triggering your publish job by hitting a GitHub API for your workflow, i.e., "),S=o("code"),lt=e("on: workflow_dispatch"),it=e(", you can follow the following example in Node:"),O=o("pre"),d=o("p"),ct=e("Your "),C=o("code"),pt=e("WORKFLOW_AUTH_TOKEN"),ut=e(" in the above example should be a GitHub personal access token with write access to the project repo. "),Y=o("strong"),ht=e("Make sure you treat this token as a secret in your repositories."),T=o("h2"),y=o("a"),dt=e("Metadata"),b=o("p"),ft=e("All metadata for your project "),D=o("strong"),gt=e("must"),kt=e(" already be filled in before automatically publishing in GitHub actions. The easiest way to ensure it is is to upload your project to RNGS locally first, which will trigger prompts for any missing metadata."),P=o("h2"),v=o("a"),mt=e("Google auth"),u=o("p"),yt=e("If you\u2019re going to run "),_=o("a"),bt=e("get-google"),vt=e(" as part of your workflow you\u2019ll need to add the Google credentials file to your repo and set the "),K=o("code"),_t=e("GOOGLE_APPLICATION_CREDENTIALS_PATH"),Et=e(" environment variable in your workflow config to the path to that file (relative to the root of your project). You can get our Google credentials file from the team 1password account."),R=o("h4"),E=o("a"),wt=e("\u{1F512} Security"),M=o("p"),At=e("Google credentials are a secret and must be handled sensitively when added to your project."),U=o("p"),Gt=e("You must:"),w=o("ol"),A=o("li"),jt=e("Keep your project repo "),W=o("strong"),Ot=e("PRIVATE"),Tt=e("."),Pt=he(),h=o("li"),Rt=e("Add a "),F=o("code"),Ht=e("secret"),It=e(" suffix to the Google credentials file in your project, e.g., "),V=o("code"),Lt=e("google-creds.secret.json"),Nt=e(", which will exclude this file when the project archive is made for clients."),this.h()},l(q){l=n(q,"SECTION",{class:!0});var c=r(l);G=n(c,"H1",{id:!0});var St=r(G);f=n(St,"A",{class:!0,href:!0});var Ct=r(f);X=a(Ct,"Automating publishing"),Ct.forEach(s),St.forEach(s),N=n(c,"P",{});var Yt=r(N);Z=a(Yt,"This graphics kit can publish projects to our RNGS server using GitHub Actions."),Yt.forEach(s),p=n(c,"P",{});var H=r(p);tt=a(H,"To set your project up for automated publishing, make sure your repo is located in the "),g=n(H,"A",{href:!0,rel:!0});var Dt=r(g);et=a(Dt,"Reuters Graphics Github org"),Dt.forEach(s),at=a(H," then move and uncomment the YAML file at "),x=n(H,"CODE",{});var Kt=r(x);st=a(Kt,".github/publish.yaml"),Kt.forEach(s),ot=a(H," and further configure the publishing conditions per the comments in that file."),H.forEach(s),j=n(c,"H2",{id:!0});var Mt=r(j);k=n(Mt,"A",{class:!0,href:!0});var Ut=r(k);nt=a(Ut,"Publishing from a script"),Ut.forEach(s),Mt.forEach(s),m=n(c,"P",{});var $=r(m);rt=a($,"If you\u2019re triggering your publish job by hitting a GitHub API for your workflow, i.e., "),S=n($,"CODE",{});var Wt=r(S);lt=a(Wt,"on: workflow_dispatch"),Wt.forEach(s),it=a($,", you can follow the following example in Node:"),$.forEach(s),O=n(c,"PRE",{class:!0});var ie=r(O);ie.forEach(s),d=n(c,"P",{});var z=r(d);ct=a(z,"Your "),C=n(z,"CODE",{});var Ft=r(C);pt=a(Ft,"WORKFLOW_AUTH_TOKEN"),Ft.forEach(s),ut=a(z," in the above example should be a GitHub personal access token with write access to the project repo. "),Y=n(z,"STRONG",{});var Vt=r(Y);ht=a(Vt,"Make sure you treat this token as a secret in your repositories."),Vt.forEach(s),z.forEach(s),T=n(c,"H2",{id:!0});var qt=r(T);y=n(qt,"A",{class:!0,href:!0});var zt=r(y);dt=a(zt,"Metadata"),zt.forEach(s),qt.forEach(s),b=n(c,"P",{});var B=r(b);ft=a(B,"All metadata for your project "),D=n(B,"STRONG",{});var $t=r(D);gt=a($t,"must"),$t.forEach(s),kt=a(B," already be filled in before automatically publishing in GitHub actions. The easiest way to ensure it is is to upload your project to RNGS locally first, which will trigger prompts for any missing metadata."),B.forEach(s),P=n(c,"H2",{id:!0});var Bt=r(P);v=n(Bt,"A",{class:!0,href:!0});var Jt=r(v);mt=a(Jt,"Google auth"),Jt.forEach(s),Bt.forEach(s),u=n(c,"P",{});var I=r(u);yt=a(I,"If you\u2019re going to run "),_=n(I,"A",{href:!0,rel:!0});var Qt=r(_);bt=a(Qt,"get-google"),Qt.forEach(s),vt=a(I," as part of your workflow you\u2019ll need to add the Google credentials file to your repo and set the "),K=n(I,"CODE",{});var Xt=r(K);_t=a(Xt,"GOOGLE_APPLICATION_CREDENTIALS_PATH"),Xt.forEach(s),Et=a(I," environment variable in your workflow config to the path to that file (relative to the root of your project). You can get our Google credentials file from the team 1password account."),I.forEach(s),R=n(c,"H4",{id:!0});var Zt=r(R);E=n(Zt,"A",{class:!0,href:!0});var te=r(E);wt=a(te,"\u{1F512} Security"),te.forEach(s),Zt.forEach(s),M=n(c,"P",{});var ee=r(M);At=a(ee,"Google credentials are a secret and must be handled sensitively when added to your project."),ee.forEach(s),U=n(c,"P",{});var ae=r(U);Gt=a(ae,"You must:"),ae.forEach(s),w=n(c,"OL",{});var J=r(w);A=n(J,"LI",{});var Q=r(A);jt=a(Q,"Keep your project repo "),W=n(Q,"STRONG",{});var se=r(W);Ot=a(se,"PRIVATE"),se.forEach(s),Tt=a(Q,"."),Q.forEach(s),Pt=de(J),h=n(J,"LI",{});var L=r(h);Rt=a(L,"Add a "),F=n(L,"CODE",{});var oe=r(F);Ht=a(oe,"secret"),oe.forEach(s),It=a(L," suffix to the Google credentials file in your project, e.g., "),V=n(L,"CODE",{});var ne=r(V);Lt=a(ne,"google-creds.secret.json"),ne.forEach(s),Nt=a(L,", which will exclude this file when the project archive is made for clients."),L.forEach(s),J.forEach(s),c.forEach(s),this.h()},h(){i(f,"class","heading-link"),i(f,"href","#automating-publishing"),i(G,"id","automating-publishing"),i(g,"href","https://github.com/reuters-graphics"),i(g,"rel","nofollow"),i(k,"class","heading-link"),i(k,"href","#publishing-from-a-script"),i(j,"id","publishing-from-a-script"),i(O,"class","language-javascript"),i(y,"class","heading-link"),i(y,"href","#metadata"),i(T,"id","metadata"),i(v,"class","heading-link"),i(v,"href","#google-auth"),i(P,"id","google-auth"),i(_,"href","https://github.com/reuters-graphics/bluprint_graphics-kit/blob/master/docs/developers/commands.md#get-data-from-google-docs-and-sheets"),i(_,"rel","nofollow"),i(E,"class","heading-link"),i(E,"href","#-security"),i(R,"id","-security"),i(l,"class","wide")},m(q,c){fe(q,l,c),t(l,G),t(G,f),t(f,X),t(l,N),t(N,Z),t(l,p),t(p,tt),t(p,g),t(g,et),t(p,at),t(p,x),t(x,st),t(p,ot),t(l,j),t(j,k),t(k,nt),t(l,m),t(m,rt),t(m,S),t(S,lt),t(m,it),t(l,O),O.innerHTML=le,t(l,d),t(d,ct),t(d,C),t(C,pt),t(d,ut),t(d,Y),t(Y,ht),t(l,T),t(T,y),t(y,dt),t(l,b),t(b,ft),t(b,D),t(D,gt),t(b,kt),t(l,P),t(P,v),t(v,mt),t(l,u),t(u,yt),t(u,_),t(_,bt),t(u,vt),t(u,K),t(K,_t),t(u,Et),t(l,R),t(R,E),t(E,wt),t(l,M),t(M,At),t(l,U),t(U,Gt),t(l,w),t(w,A),t(A,jt),t(A,W),t(W,Ot),t(A,Tt),t(w,Pt),t(w,h),t(h,Rt),t(h,F),t(F,Ht),t(h,It),t(h,V),t(V,Lt),t(h,Nt)},p:xt,i:xt,o:xt,d(q){q&&s(l)}}}const me={title:"Automated publishing",published:!0,order:19};class ye extends ce{constructor(l){super();pe(this,l,null,ge,ue,{})}}export{ye as default,me as metadata};
