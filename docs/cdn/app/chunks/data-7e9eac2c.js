import{S as ie,i as ue,s as de,e as n,t as o,k as la,c as s,a as e,h as p,d as t,m as ia,b as l,g as he,L as a,Z as Mn}from"./vendor-a9517919.js";function ke(Vs){let c,H,y,et,ua,ot,i,da,R,pt,ct,ha,L,rt,lt,W,M,it,ka,fa,C,ut,dt,ya,G,ht,kt,ma,q,ft,yt,J,m,mt,d,gt,ga,wt,vt,wa,bt,Et,va,_t,B,ba,jt,Pt,Ea,St,f,_a,At,Dt,ja,xt,It,g,Tt,w,Nt,Ot,Pa,Ht,F,h,Rt,Sa,Lt,Wt,v,Mt,Ct,Gt,U,b,qt,Aa,Jt,Da,Bt,Y,E,Ft,xa,Ut,Ia,Ta,Yt,Na,Vt,Oa,$t,Ha,zt,V,$s=`<code class="language-undefined">src/
  lib/
    my-chart/
      index.svelte
      data.json \u{1F448}
    App.svelte</code>`,Ra,Kt,$,zs=`<code class="language-svelte"><span class="token comment">&lt;!-- mychart/index.svelte --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> data <span class="token keyword">from</span> <span class="token string">'./data.json'</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">#each</span> <span class="token language-javascript">data </span><span class="token keyword">as</span> <span class="token language-javascript">d<span class="token punctuation">&#125;</span></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">style="width:</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>d<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span></span><span class="token attr-name">%;</span> <span class="token attr-name"><span class="token namespace">background:</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>d<span class="token punctuation">.</span>colour<span class="token punctuation">&#125;</span></span><span class="token attr-name">;"</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span>d<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">/each</span><span class="token punctuation">&#125;</span></span></code>`,z,_,Qt,j,Zt,P,Xt,an,S,tn,La,nn,sn,K,Ks=`<code class="language-svelte"><span class="token comment">&lt;!-- \u{1F447} Add this script tag. Note the context="module"! --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// Export an async load function</span>
  <span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> fetch <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">https://graphics.reuters.com/path/to/my.json</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          myData<span class="token operator">:</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// Oops!</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      status<span class="token operator">:</span> res<span class="token punctuation">.</span>status<span class="token punctuation">,</span>
      error<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Could not load </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- pages/index.svelte --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'$lib/App.svelte'</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>

  <span class="token comment">// \u{1F447} Define a prop for this data</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> myData<span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- \u{1F447} Pass our data to the App component, which can in turn pass it
to any other components that need this data! --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token attr-name">myData="</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>myData<span class="token punctuation">&#125;</span></span><span class="token attr-name">"</span> <span class="token punctuation">/></span></span></code>`,Q,A,en,D,on,x,pn,cn,Wa,rn,Z,Qs=`<code class="language-svelte"><span class="token comment">&lt;!-- mychart/index.svelte --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// Create a variable for your data...</span>
  <span class="token keyword">let</span> myData<span class="token punctuation">;</span>

  <span class="token comment">// ... and an async function to get it...</span>
  <span class="token keyword">const</span> <span class="token function-variable function">fetchMyData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>
      <span class="token string">'http://graphics.thomsonreuters.com/data/2021/biden-approval-tracker/approval.json'</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> resp<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    myData <span class="token operator">=</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token comment">// ... then call that function!</span>
  <span class="token function">fetchMyData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> myData<span class="token punctuation">&#125;</span></span>
  <span class="token comment">&lt;!-- Do something with your data once it's been fetched! --></span>
<span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></code>`,X,Ma,ln,un,aa,I,dn,T,hn,Ca,kn,fn,Ga,yn,N,mn,qa,gn,wn,O,vn,Ja,bn,En,ta,Zs=`<code class="language-bash">bin/
  scrapeData.cjs</code>`,Ba,_n,na,Xs=`<code class="language-javascript"><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'axios'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">fetchData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'https://some.api'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> resp<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">filterData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d<span class="token punctuation">.</span>active<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">writeData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> outputPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'src/lib/mychart/data.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>outputPath<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringfy</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">getData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> rawData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> filteredData <span class="token operator">=</span> <span class="token function">filterData</span><span class="token punctuation">(</span>rawData<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">writeData</span><span class="token punctuation">(</span>filteredData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`,Fa,jn,sa,ae='<code class="language-bash">node ./bin/scrapeData.cjs</code>',ea,Ua,Pn,Sn,k,An,Ya,Dn,xn,Va,In,Tn,oa,te=`<code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"upload"</span><span class="token operator">:</span> <span class="token string">"node ./bin/scrapeData.cjs &amp;&amp; npm-run-all publish:upload"</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,$a,Nn;return{c(){c=n("section"),H=n("h1"),y=n("a"),et=o("Working with data"),ua=n("p"),ot=o("Data drives pages. This guide outlines how to work with different types of data, depending on the role your data plays in your project."),i=n("ul"),da=n("li"),R=n("a"),pt=o("Static vs. dynamic data"),ct=la(),ha=n("li"),L=n("a"),rt=o("Data file types"),lt=la(),W=n("li"),M=n("a"),it=o("Where to put your static data"),ka=n("ul"),fa=n("li"),C=n("a"),ut=o("Remote static data"),dt=la(),ya=n("li"),G=n("a"),ht=o("Fetching dynamic data"),kt=la(),ma=n("li"),q=n("a"),ft=o("Preparing static data"),yt=la(),J=n("h2"),m=n("a"),mt=o("Static vs. dynamic data"),d=n("p"),gt=o("The first question you should ask about your data is: Is my data "),ga=n("em"),wt=o("static"),vt=o(" or "),wa=n("em"),bt=o("dynamic"),Et=o("?"),va=n("p"),_t=o("What do we mean?"),B=n("p"),ba=n("strong"),jt=o("Static data"),Pt=o(" is data that isn\u2019t going to change beyond the point you publish your project. The text you pull into your project from a Google doc is an example of this kind of data. That text may change while you\u2019re developing the project (getting it edited, etc.), but once you publish, it\u2019s locked in, and any changes to the data from there will mean you need to republish the project."),Ea=n("p"),St=o("This is the main type of data we\u2019ll talk about working with."),f=n("p"),_a=n("strong"),At=o("Dynamic data"),Dt=o(" is data that you expect "),ja=n("em"),xt=o("will change"),It=o(" after you publish your project. Tracking projects often use this type of data and fetch it on page load to make sure readers see the latest data on the page."),g=n("p"),Tt=o("In general, dynamic data often is published separately from the project you\u2019re working on. See our "),w=n("a"),Nt=o("GitHub scraper bluprint"),Ot=o(" for an example of setting up a scraper that can independently publish data on a timer that your project can then fetch."),Pa=n("p"),Ht=o("We won\u2019t talk as much about this type of data."),F=n("blockquote"),h=n("p"),Rt=o("It\u2019s worth noting one alternative pattern we "),Sa=n("em"),Lt=o("do"),Wt=o(" use for tracking projects using dynamic data. We can setup a project to re-publish from GitHub on a schedule or through an API as data updates. That lets us treat dynamic data as though it were static. Read more about that setup in the "),v=n("a"),Mt=o("Automated publishing"),Ct=o(" doc."),Gt=la(),U=n("h2"),b=n("a"),qt=o("Data file types"),Aa=n("p"),Jt=o("A quick note on data file types. We\u2019re not going to cover using data in delimited file formats, e.g., TSV, CSV, or the like."),Da=n("p"),Bt=o("In general, we recommend converting your data to JSON, we\u2019ll talk more about why and how to convert it if your source data comes in one of those formats."),Y=n("h2"),E=n("a"),Ft=o("Where to put your static data"),xa=n("p"),Ut=o("You might be tempted to put static data with other media files like images or fonts and then fetch them in your code\u2026"),Ia=n("p"),Ta=n("strong"),Yt=o("But don\u2019t!"),Na=n("p"),Vt=o("If your data is indeed static, then it\u2019s actually far better to import your data directly into your components because the content that data makes can then be baked out into the page when we build it, which means faster load times and better for accessibility and SEO."),Oa=n("p"),$t=o("Because we\u2019re going to import our data just like a component, we can treat it like code and put it right next to the component that uses it."),Ha=n("p"),zt=o("Say we have data for a chart, we might have a directly structure like this:"),V=n("pre"),Ra=n("p"),Kt=o("Now you can import your data just like a regular module in the component that uses it:"),$=n("pre"),z=n("h3"),_=n("a"),Qt=o("What if my static data lives somewhere else?"),j=n("p"),Zt=o("If your static data lives somewhere other than in your project, then you can use Sveltekit\u2019s built-in "),P=n("a"),Xt=o("load"),an=o(" function to import your data and then pass it to the components that need it through props."),S=n("p"),tn=o("To do that, we\u2019re going to go to the component in the "),La=n("code"),nn=o("pages/"),sn=o(" directory that defines the page that needs the data and export a load function that returns the data in a props object we can then pass to any components that need it:"),K=n("pre"),Q=n("h2"),A=n("a"),en=o("Fetching dynamic data"),D=n("p"),on=o("If your data is dynamic, you can use the "),x=n("a"),pn=o("fetch API"),cn=o(" to get it."),Wa=n("p"),rn=o("Here\u2019s an example:"),Z=n("pre"),X=n("p"),Ma=n("strong"),ln=o("Remember"),un=o(", because we have to wait for the async function to fetch your data, any content made from this data won\u2019t be baked out into the page. That means your component will be slower to load and not as accessible or SEO friendly. If your data is static, use one of the patterns above. If not, then that slowness is the cost of keeping your page up-to-date."),aa=n("h2"),I=n("a"),dn=o("Preparing static data"),T=n("p"),hn=o("So what if you need to "),Ca=n("em"),kn=o("prepare"),fn=o(" your static data? Say, you need to fetch it from an API or filter it down to just the data you need on the page or otherwise convert it from another format to JSON."),Ga=n("p"),yn=o("Your best bet is to write a simple script in Node to do what you need and save the resulting JSON in your project."),N=n("p"),mn=o("A good place to put such scripts is the "),qa=n("code"),gn=o("bin/"),wn=o(" folder in your project."),O=n("p"),vn=o("So let\u2019s go through an example. Make a "),Ja=n("code"),bn=o(".cjs"),En=o(" file (for CommonJS Node script) in your bin directory:"),ta=n("pre"),Ba=n("p"),_n=o("\u2026 And let\u2019s say that script calls a simple API and parses the data."),na=n("pre"),Fa=n("p"),jn=o("Now you can call that file from the command line with:"),sa=n("pre"),ea=n("p"),Ua=n("strong"),Pn=o("BONUS"),Sn=o(": Let\u2019s say you want your script to run and refresh your data everytime before you publish."),k=n("p"),An=o("You can add it to the front of the "),Ya=n("code"),Dn=o("upload"),xn=o(" script in "),Va=n("code"),In=o("package.json"),Tn=o(" like this:"),oa=n("pre"),$a=n("p"),Nn=o("Now your script will refresh your data everytime before you upload your page to the RNGS server."),this.h()},l(za){c=s(za,"SECTION",{class:!0});var r=e(c);H=s(r,"H1",{id:!0});var Cn=e(H);y=s(Cn,"A",{class:!0,href:!0});var Gn=e(y);et=p(Gn,"Working with data"),Gn.forEach(t),Cn.forEach(t),ua=s(r,"P",{});var qn=e(ua);ot=p(qn,"Data drives pages. This guide outlines how to work with different types of data, depending on the role your data plays in your project."),qn.forEach(t),i=s(r,"UL",{});var u=e(i);da=s(u,"LI",{});var Jn=e(da);R=s(Jn,"A",{href:!0});var Bn=e(R);pt=p(Bn,"Static vs. dynamic data"),Bn.forEach(t),Jn.forEach(t),ct=ia(u),ha=s(u,"LI",{});var Fn=e(ha);L=s(Fn,"A",{href:!0});var Un=e(L);rt=p(Un,"Data file types"),Un.forEach(t),Fn.forEach(t),lt=ia(u),W=s(u,"LI",{});var On=e(W);M=s(On,"A",{href:!0});var Yn=e(M);it=p(Yn,"Where to put your static data"),Yn.forEach(t),ka=s(On,"UL",{});var Vn=e(ka);fa=s(Vn,"LI",{});var $n=e(fa);C=s($n,"A",{href:!0});var zn=e(C);ut=p(zn,"Remote static data"),zn.forEach(t),$n.forEach(t),Vn.forEach(t),On.forEach(t),dt=ia(u),ya=s(u,"LI",{});var Kn=e(ya);G=s(Kn,"A",{href:!0});var Qn=e(G);ht=p(Qn,"Fetching dynamic data"),Qn.forEach(t),Kn.forEach(t),kt=ia(u),ma=s(u,"LI",{});var Zn=e(ma);q=s(Zn,"A",{href:!0});var Xn=e(q);ft=p(Xn,"Preparing static data"),Xn.forEach(t),Zn.forEach(t),yt=ia(u),u.forEach(t),J=s(r,"H2",{id:!0});var as=e(J);m=s(as,"A",{class:!0,href:!0});var ts=e(m);mt=p(ts,"Static vs. dynamic data"),ts.forEach(t),as.forEach(t),d=s(r,"P",{});var pa=e(d);gt=p(pa,"The first question you should ask about your data is: Is my data "),ga=s(pa,"EM",{});var ns=e(ga);wt=p(ns,"static"),ns.forEach(t),vt=p(pa," or "),wa=s(pa,"EM",{});var ss=e(wa);bt=p(ss,"dynamic"),ss.forEach(t),Et=p(pa,"?"),pa.forEach(t),va=s(r,"P",{});var es=e(va);_t=p(es,"What do we mean?"),es.forEach(t),B=s(r,"P",{});var Hn=e(B);ba=s(Hn,"STRONG",{});var os=e(ba);jt=p(os,"Static data"),os.forEach(t),Pt=p(Hn," is data that isn\u2019t going to change beyond the point you publish your project. The text you pull into your project from a Google doc is an example of this kind of data. That text may change while you\u2019re developing the project (getting it edited, etc.), but once you publish, it\u2019s locked in, and any changes to the data from there will mean you need to republish the project."),Hn.forEach(t),Ea=s(r,"P",{});var ps=e(Ea);St=p(ps,"This is the main type of data we\u2019ll talk about working with."),ps.forEach(t),f=s(r,"P",{});var Ka=e(f);_a=s(Ka,"STRONG",{});var cs=e(_a);At=p(cs,"Dynamic data"),cs.forEach(t),Dt=p(Ka," is data that you expect "),ja=s(Ka,"EM",{});var rs=e(ja);xt=p(rs,"will change"),rs.forEach(t),It=p(Ka," after you publish your project. Tracking projects often use this type of data and fetch it on page load to make sure readers see the latest data on the page."),Ka.forEach(t),g=s(r,"P",{});var Qa=e(g);Tt=p(Qa,"In general, dynamic data often is published separately from the project you\u2019re working on. See our "),w=s(Qa,"A",{href:!0,rel:!0});var ls=e(w);Nt=p(ls,"GitHub scraper bluprint"),ls.forEach(t),Ot=p(Qa," for an example of setting up a scraper that can independently publish data on a timer that your project can then fetch."),Qa.forEach(t),Pa=s(r,"P",{});var is=e(Pa);Ht=p(is,"We won\u2019t talk as much about this type of data."),is.forEach(t),F=s(r,"BLOCKQUOTE",{});var Rn=e(F);h=s(Rn,"P",{});var ca=e(h);Rt=p(ca,"It\u2019s worth noting one alternative pattern we "),Sa=s(ca,"EM",{});var us=e(Sa);Lt=p(us,"do"),us.forEach(t),Wt=p(ca," use for tracking projects using dynamic data. We can setup a project to re-publish from GitHub on a schedule or through an API as data updates. That lets us treat dynamic data as though it were static. Read more about that setup in the "),v=s(ca,"A",{href:!0,rel:!0});var ds=e(v);Mt=p(ds,"Automated publishing"),ds.forEach(t),Ct=p(ca," doc."),ca.forEach(t),Gt=ia(Rn),Rn.forEach(t),U=s(r,"H2",{id:!0});var hs=e(U);b=s(hs,"A",{class:!0,href:!0});var ks=e(b);qt=p(ks,"Data file types"),ks.forEach(t),hs.forEach(t),Aa=s(r,"P",{});var fs=e(Aa);Jt=p(fs,"A quick note on data file types. We\u2019re not going to cover using data in delimited file formats, e.g., TSV, CSV, or the like."),fs.forEach(t),Da=s(r,"P",{});var ys=e(Da);Bt=p(ys,"In general, we recommend converting your data to JSON, we\u2019ll talk more about why and how to convert it if your source data comes in one of those formats."),ys.forEach(t),Y=s(r,"H2",{id:!0});var ms=e(Y);E=s(ms,"A",{class:!0,href:!0});var gs=e(E);Ft=p(gs,"Where to put your static data"),gs.forEach(t),ms.forEach(t),xa=s(r,"P",{});var ws=e(xa);Ut=p(ws,"You might be tempted to put static data with other media files like images or fonts and then fetch them in your code\u2026"),ws.forEach(t),Ia=s(r,"P",{});var vs=e(Ia);Ta=s(vs,"STRONG",{});var bs=e(Ta);Yt=p(bs,"But don\u2019t!"),bs.forEach(t),vs.forEach(t),Na=s(r,"P",{});var Es=e(Na);Vt=p(Es,"If your data is indeed static, then it\u2019s actually far better to import your data directly into your components because the content that data makes can then be baked out into the page when we build it, which means faster load times and better for accessibility and SEO."),Es.forEach(t),Oa=s(r,"P",{});var _s=e(Oa);$t=p(_s,"Because we\u2019re going to import our data just like a component, we can treat it like code and put it right next to the component that uses it."),_s.forEach(t),Ha=s(r,"P",{});var js=e(Ha);zt=p(js,"Say we have data for a chart, we might have a directly structure like this:"),js.forEach(t),V=s(r,"PRE",{class:!0});var ne=e(V);ne.forEach(t),Ra=s(r,"P",{});var Ps=e(Ra);Kt=p(Ps,"Now you can import your data just like a regular module in the component that uses it:"),Ps.forEach(t),$=s(r,"PRE",{class:!0});var se=e($);se.forEach(t),z=s(r,"H3",{id:!0});var Ss=e(z);_=s(Ss,"A",{class:!0,href:!0});var As=e(_);Qt=p(As,"What if my static data lives somewhere else?"),As.forEach(t),Ss.forEach(t),j=s(r,"P",{});var Za=e(j);Zt=p(Za,"If your static data lives somewhere other than in your project, then you can use Sveltekit\u2019s built-in "),P=s(Za,"A",{href:!0,rel:!0});var Ds=e(P);Xt=p(Ds,"load"),Ds.forEach(t),an=p(Za," function to import your data and then pass it to the components that need it through props."),Za.forEach(t),S=s(r,"P",{});var Xa=e(S);tn=p(Xa,"To do that, we\u2019re going to go to the component in the "),La=s(Xa,"CODE",{});var xs=e(La);nn=p(xs,"pages/"),xs.forEach(t),sn=p(Xa," directory that defines the page that needs the data and export a load function that returns the data in a props object we can then pass to any components that need it:"),Xa.forEach(t),K=s(r,"PRE",{class:!0});var ee=e(K);ee.forEach(t),Q=s(r,"H2",{id:!0});var Is=e(Q);A=s(Is,"A",{class:!0,href:!0});var Ts=e(A);en=p(Ts,"Fetching dynamic data"),Ts.forEach(t),Is.forEach(t),D=s(r,"P",{});var at=e(D);on=p(at,"If your data is dynamic, you can use the "),x=s(at,"A",{href:!0,rel:!0});var Ns=e(x);pn=p(Ns,"fetch API"),Ns.forEach(t),cn=p(at," to get it."),at.forEach(t),Wa=s(r,"P",{});var Os=e(Wa);rn=p(Os,"Here\u2019s an example:"),Os.forEach(t),Z=s(r,"PRE",{class:!0});var oe=e(Z);oe.forEach(t),X=s(r,"P",{});var Ln=e(X);Ma=s(Ln,"STRONG",{});var Hs=e(Ma);ln=p(Hs,"Remember"),Hs.forEach(t),un=p(Ln,", because we have to wait for the async function to fetch your data, any content made from this data won\u2019t be baked out into the page. That means your component will be slower to load and not as accessible or SEO friendly. If your data is static, use one of the patterns above. If not, then that slowness is the cost of keeping your page up-to-date."),Ln.forEach(t),aa=s(r,"H2",{id:!0});var Rs=e(aa);I=s(Rs,"A",{class:!0,href:!0});var Ls=e(I);dn=p(Ls,"Preparing static data"),Ls.forEach(t),Rs.forEach(t),T=s(r,"P",{});var tt=e(T);hn=p(tt,"So what if you need to "),Ca=s(tt,"EM",{});var Ws=e(Ca);kn=p(Ws,"prepare"),Ws.forEach(t),fn=p(tt," your static data? Say, you need to fetch it from an API or filter it down to just the data you need on the page or otherwise convert it from another format to JSON."),tt.forEach(t),Ga=s(r,"P",{});var Ms=e(Ga);yn=p(Ms,"Your best bet is to write a simple script in Node to do what you need and save the resulting JSON in your project."),Ms.forEach(t),N=s(r,"P",{});var nt=e(N);mn=p(nt,"A good place to put such scripts is the "),qa=s(nt,"CODE",{});var Cs=e(qa);gn=p(Cs,"bin/"),Cs.forEach(t),wn=p(nt," folder in your project."),nt.forEach(t),O=s(r,"P",{});var st=e(O);vn=p(st,"So let\u2019s go through an example. Make a "),Ja=s(st,"CODE",{});var Gs=e(Ja);bn=p(Gs,".cjs"),Gs.forEach(t),En=p(st," file (for CommonJS Node script) in your bin directory:"),st.forEach(t),ta=s(r,"PRE",{class:!0});var pe=e(ta);pe.forEach(t),Ba=s(r,"P",{});var qs=e(Ba);_n=p(qs,"\u2026 And let\u2019s say that script calls a simple API and parses the data."),qs.forEach(t),na=s(r,"PRE",{class:!0});var ce=e(na);ce.forEach(t),Fa=s(r,"P",{});var Js=e(Fa);jn=p(Js,"Now you can call that file from the command line with:"),Js.forEach(t),sa=s(r,"PRE",{class:!0});var re=e(sa);re.forEach(t),ea=s(r,"P",{});var Wn=e(ea);Ua=s(Wn,"STRONG",{});var Bs=e(Ua);Pn=p(Bs,"BONUS"),Bs.forEach(t),Sn=p(Wn,": Let\u2019s say you want your script to run and refresh your data everytime before you publish."),Wn.forEach(t),k=s(r,"P",{});var ra=e(k);An=p(ra,"You can add it to the front of the "),Ya=s(ra,"CODE",{});var Fs=e(Ya);Dn=p(Fs,"upload"),Fs.forEach(t),xn=p(ra," script in "),Va=s(ra,"CODE",{});var Us=e(Va);In=p(Us,"package.json"),Us.forEach(t),Tn=p(ra," like this:"),ra.forEach(t),oa=s(r,"PRE",{class:!0});var le=e(oa);le.forEach(t),$a=s(r,"P",{});var Ys=e($a);Nn=p(Ys,"Now your script will refresh your data everytime before you upload your page to the RNGS server."),Ys.forEach(t),r.forEach(t),this.h()},h(){l(y,"class","heading-link"),l(y,"href","#working-with-data"),l(H,"id","working-with-data"),l(R,"href","#static-vs-dynamic-data"),l(L,"href","#data-file-types"),l(M,"href","#where-to-put-your-static-data"),l(C,"href","#what-if-my-static-data-lives-somewhere-else"),l(G,"href","#fetching-dynamic-data"),l(q,"href","#preparing-static-data"),l(m,"class","heading-link"),l(m,"href","#static-vs-dynamic-data"),l(J,"id","static-vs-dynamic-data"),l(w,"href","https://github.com/reuters-graphics/bluprint_github-action-scraper"),l(w,"rel","nofollow"),l(v,"href","https://github.com/reuters-graphics/bluprint_graphics-kit/blob/master/docs/developers/automated-publishing.md"),l(v,"rel","nofollow"),l(b,"class","heading-link"),l(b,"href","#data-file-types"),l(U,"id","data-file-types"),l(E,"class","heading-link"),l(E,"href","#where-to-put-your-static-data"),l(Y,"id","where-to-put-your-static-data"),l(V,"class","language-undefined"),l($,"class","language-svelte"),l(_,"class","heading-link"),l(_,"href","#what-if-my-static-data-lives-somewhere-else"),l(z,"id","what-if-my-static-data-lives-somewhere-else"),l(P,"href","https://kit.svelte.dev/docs#loading"),l(P,"rel","nofollow"),l(K,"class","language-svelte"),l(A,"class","heading-link"),l(A,"href","#fetching-dynamic-data"),l(Q,"id","fetching-dynamic-data"),l(x,"href","https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"),l(x,"rel","nofollow"),l(Z,"class","language-svelte"),l(I,"class","heading-link"),l(I,"href","#preparing-static-data"),l(aa,"id","preparing-static-data"),l(ta,"class","language-bash"),l(na,"class","language-javascript"),l(sa,"class","language-bash"),l(oa,"class","language-json"),l(c,"class","wide")},m(za,r){he(za,c,r),a(c,H),a(H,y),a(y,et),a(c,ua),a(ua,ot),a(c,i),a(i,da),a(da,R),a(R,pt),a(i,ct),a(i,ha),a(ha,L),a(L,rt),a(i,lt),a(i,W),a(W,M),a(M,it),a(W,ka),a(ka,fa),a(fa,C),a(C,ut),a(i,dt),a(i,ya),a(ya,G),a(G,ht),a(i,kt),a(i,ma),a(ma,q),a(q,ft),a(i,yt),a(c,J),a(J,m),a(m,mt),a(c,d),a(d,gt),a(d,ga),a(ga,wt),a(d,vt),a(d,wa),a(wa,bt),a(d,Et),a(c,va),a(va,_t),a(c,B),a(B,ba),a(ba,jt),a(B,Pt),a(c,Ea),a(Ea,St),a(c,f),a(f,_a),a(_a,At),a(f,Dt),a(f,ja),a(ja,xt),a(f,It),a(c,g),a(g,Tt),a(g,w),a(w,Nt),a(g,Ot),a(c,Pa),a(Pa,Ht),a(c,F),a(F,h),a(h,Rt),a(h,Sa),a(Sa,Lt),a(h,Wt),a(h,v),a(v,Mt),a(h,Ct),a(F,Gt),a(c,U),a(U,b),a(b,qt),a(c,Aa),a(Aa,Jt),a(c,Da),a(Da,Bt),a(c,Y),a(Y,E),a(E,Ft),a(c,xa),a(xa,Ut),a(c,Ia),a(Ia,Ta),a(Ta,Yt),a(c,Na),a(Na,Vt),a(c,Oa),a(Oa,$t),a(c,Ha),a(Ha,zt),a(c,V),V.innerHTML=$s,a(c,Ra),a(Ra,Kt),a(c,$),$.innerHTML=zs,a(c,z),a(z,_),a(_,Qt),a(c,j),a(j,Zt),a(j,P),a(P,Xt),a(j,an),a(c,S),a(S,tn),a(S,La),a(La,nn),a(S,sn),a(c,K),K.innerHTML=Ks,a(c,Q),a(Q,A),a(A,en),a(c,D),a(D,on),a(D,x),a(x,pn),a(D,cn),a(c,Wa),a(Wa,rn),a(c,Z),Z.innerHTML=Qs,a(c,X),a(X,Ma),a(Ma,ln),a(X,un),a(c,aa),a(aa,I),a(I,dn),a(c,T),a(T,hn),a(T,Ca),a(Ca,kn),a(T,fn),a(c,Ga),a(Ga,yn),a(c,N),a(N,mn),a(N,qa),a(qa,gn),a(N,wn),a(c,O),a(O,vn),a(O,Ja),a(Ja,bn),a(O,En),a(c,ta),ta.innerHTML=Zs,a(c,Ba),a(Ba,_n),a(c,na),na.innerHTML=Xs,a(c,Fa),a(Fa,jn),a(c,sa),sa.innerHTML=ae,a(c,ea),a(ea,Ua),a(Ua,Pn),a(ea,Sn),a(c,k),a(k,An),a(k,Ya),a(Ya,Dn),a(k,xn),a(k,Va),a(Va,In),a(k,Tn),a(c,oa),oa.innerHTML=te,a(c,$a),a($a,Nn)},p:Mn,i:Mn,o:Mn,d(za){za&&t(c)}}}const ye={title:"Working with data",published:!0,order:10};class me extends ie{constructor(c){super();ue(this,c,null,ke,de,{})}}export{me as default,ye as metadata};
